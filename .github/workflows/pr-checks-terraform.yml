---
name: "Terraform Checks"

on:
  pull_request:
    paths-ignore:
      - ".github/**"

env:
  TF_CLOUD_ORGANIZATION: allma
  TF_WORKSPACE: aws-sandbox-doug-ireton-us-east-2

jobs:
  required-pr-checks:
    name: Required PR Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.3.x
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v2

      - name: TFLint Version
        run: tflint --version

      - name: Cache plugin dir
        uses: actions/cache@v3
        with:
          path: ~/.tflint.d/plugins
          key: ${{ runner.os }}-tflint-${{ hashFiles('.tflint.hcl') }}

      - name: Terraform Init
        id: init
        run: terraform init

      - name: TFLint Init
        run: tflint --init

      - name: Terraform Format
        id: fmt
        run: terraform fmt -check -diff -recursive

      - name: Run TFLint
        run: tflint -f compact

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        continue-on-error: true

      - uses: actions/github-script@v6
        env:
          PLAN: ${{ steps.plan.outputs.stdout }}
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå \`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è \`${{ steps.init.outcome }}\`
            #### Terraform Plan üìñ \`${{ steps.plan.outcome }}\`
            <details>
            <summary>Terraform Plan</summary>

            \`\`\`terraform
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1
